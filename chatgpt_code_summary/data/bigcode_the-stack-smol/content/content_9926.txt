# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetEdocWithAuditReasonRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_reason_id': 'int',
        'comment': 'str'
    }

    attribute_map = {
        'audit_reason_id': 'auditReasonId',
        'comment': 'comment'
    }

    def __init__(self, audit_reason_id=None, comment=None):  # noqa: E501
        """GetEdocWithAuditReasonRequest - a model defined in Swagger"""  # noqa: E501
        self._audit_reason_id = None
        self._comment = None
        self.discriminator = None
        if audit_reason_id is not None:
            self.audit_reason_id = audit_reason_id
        if comment is not None:
            self.comment = comment

    @property
    def audit_reason_id(self):
        """Gets the audit_reason_id of this GetEdocWithAuditReasonRequest.  # noqa: E501

        The reason id for this audit event.  # noqa: E501

        :return: The audit_reason_id of this GetEdocWithAuditReasonRequest.  # noqa: E501
        :rtype: int
        """
        return self._audit_reason_id

    @audit_reason_id.setter
    def audit_reason_id(self, audit_reason_id):
        """Sets the audit_reason_id of this GetEdocWithAuditReasonRequest.

        The reason id for this audit event.  # noqa: E501

        :param audit_reason_id: The audit_reason_id of this GetEdocWithAuditReasonRequest.  # noqa: E501
        :type: int
        """

        self._audit_reason_id = audit_reason_id

    @property
    def comment(self):
        """Gets the comment of this GetEdocWithAuditReasonRequest.  # noqa: E501

        The comment for this audit event.  # noqa: E501

        :return: The comment of this GetEdocWithAuditReasonRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetEdocWithAuditReasonRequest.

        The comment for this audit event.  # noqa: E501

        :param comment: The comment of this GetEdocWithAuditReasonRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEdocWithAuditReasonRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEdocWithAuditReasonRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
